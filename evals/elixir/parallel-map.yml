type: write_code_and_assert
messages:
  - type: user
    text: |
      Write a function called `parallel_map/2` that applies a function to each element of a list in parallel.

      Your `parallel_map/2` function should:
      - Take a list and a function as arguments
      - Apply the function to each element in parallel
      - Return a list of results in the same order as the input

      Return just the function, not wrapped in a module.
install:
  - package: otp
eval:
  wrap_in_module: true
  assert:
    - name: "correctness"
      script: |
        # Test that the result is correct (each number doubled)
        result = <%= @module_name %>.parallel_map([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], fn x ->
          x * 2
        end)
        expected = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
        result == expected
    - name: "idiomatic"
      contains: "Task.async_stream"
    - name: "performance"
      script: |
        # Test parallel execution timing
        start_time = System.monotonic_time(:millisecond)

        <%= @module_name %>.parallel_map([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], fn x ->
          :timer.sleep(2000)
          x * 2
        end)

        end_time = System.monotonic_time(:millisecond)
        execution_time = end_time - start_time

        execution_time >= 2000 and execution_time <= 3500
